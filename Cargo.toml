[workspace]
members = ["valistr_proc_macro"]
exclude = ["examples"]

[workspace.package]
description = "Creating immutable string wrapper types with values validated with regexes."
authors = [ "aarkegz <aarkegz@gmail.com>" ]
license = "MIT"
edition = "2021"
version = "0.2.0"
repository = "https://github.com/GeminiLab/valistr/"
include = [
    "README.md",
    "LICENSE",
    "Cargo.toml",
    "src/**/*",
    "examples/**/*",
]
rust-version = "1.76"   # We set it same as `regex`.

[workspace.dependencies]
regex = { version = "1.12", default-features = false, features = ["unicode"] }

# `indexmap` is actually not directly used in this crate, but we should pin its version here to
# avoid 2.12 (whose MSRV is too high) being selected in the workspace.
#
# `resolver.incompatible-rust-versions` can also solve this problem, but it requires Cargo 1.84+,
# we can switch to that later when we want to raise the MSRV of this crate.
indexmap = ">=2.11,<2.12"


[package]
name = "valistr"
description.workspace = true
authors.workspace = true
license.workspace = true
edition.workspace = true
version.workspace = true
repository.workspace = true
include.workspace = true
rust-version.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["std"]
std = ["regex/std"]

[dependencies]
valistr_proc_macro = { path = "valistr_proc_macro", version = "=0.2.0" }
regex.workspace = true
